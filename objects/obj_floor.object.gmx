<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_floor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Up=instance_position(x, bbox_top-sprite_height/2, obj_floor);
Down=instance_position(x, bbox_bottom+1, obj_floor);
Left=instance_position(bbox_left-1, y, obj_floor);
Right=instance_position(bbox_right+1, y, obj_floor);

Cost = 1;
// The variable Cost decides how easy or difficult it is to traverse a tile.
// Setting it higher makes it more difficult, whereas setting it to 0 makes
// it impossible. Walls would have a Cost of 0 and Swamps would have a Cost
// of 2 or 3.


Reachable = false;
Half_Turn = false;
Full_Turn = false;

my_unit = instance_position(x, y, obj_unit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Reachable) 
{
    if((x-sprite_width/2 &lt; mouse_x) &amp;&amp; (x+sprite_width/2 &gt; mouse_x) &amp;&amp; (y-sprite_height/2 &lt; mouse_y) &amp;&amp; (y+sprite_height/2 &gt; mouse_y)) {
        image_index = 1;
        draw_self();
    } else {
        image_index = 0;
        draw_self();
    }
    if(Half_Turn)
    {
        image_blend=c_yellow;
    } else {
        image_blend=c_aqua;
    }
} else {
    image_index = 0;
    image_blend=c_white;
    draw_self();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
